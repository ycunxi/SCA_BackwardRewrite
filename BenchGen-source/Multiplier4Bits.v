/*This Verilog is generated by BechGen software.*/
/*Designed by University of Massachusetts, Amherst, VLSI CAD LAB, Cunxi Yu*/
/*/  Copyright (c) 2014 Cunxi Yu. All rights reserved. */ 
/*Contact: ycunxi@umass.edu */
module CSAMultiplier(a,b,z);
 input [3:0] a;
 input [3:0] b;
 output [7:0] z;
 wire [7:0] z;
    assign mult_stage1_and0 = a[0] & b[0];
    assign mult_stage1_and1 = a[0] & b[1];
    assign mult_stage1_and2 = a[1] & b[0];
    assign mult_stage1_and3 = a[1] & b[1];
    assign mult_stage1_and4 = a[2] & b[0];
    assign mult_stage1_and5 = a[2] & b[1];
    assign mult_stage1_and6 = a[3] & b[0];
    assign mult_stage1_and7 = a[3] & b[1];
    assign z[0] = a[0] & b[0];
    assign z[1] = mult_stage1_and1 ^ mult_stage1_and2;
    assign mult_stage1_cout0 = mult_stage1_and1 & mult_stage1_and2;
    assign mult_stage1_sum1 = mult_stage1_and3 ^ mult_stage1_and4;
    assign mult_stage1_cout1 = mult_stage1_and3 & mult_stage1_and4;
    assign mult_stage1_sum2 = mult_stage1_and5 ^ mult_stage1_and6;
    assign mult_stage1_cout2 = mult_stage1_and5 & mult_stage1_and6;
 /* This is the CSA multiplier first Stage.*/
    assign mult_stage2_and1 = a[0] & b[2];
    assign mult_stage2_and2 = mult_stage2_and1 & mult_stage1_cout0;
    assign mult_stage2_and3 = mult_stage2_and1 & mult_stage1_sum1;
    assign mult_stage2_and4 = mult_stage1_cout0 & mult_stage1_sum1;
    assign mult_stage2_or0 = mult_stage2_and2 | mult_stage2_and3;
    assign mult_stage2_cout0 = mult_stage2_or0 | mult_stage2_and4;
    assign mult_stage2_xor0 = mult_stage2_and1 ^ mult_stage1_cout0;
    assign z[2] = mult_stage2_xor0 ^ mult_stage1_sum1;
    assign mult_stage2_and5 = a[1] & b[2];
    assign mult_stage2_and6 = mult_stage2_and5 & mult_stage1_cout1;
    assign mult_stage2_and7 = mult_stage2_and5 & mult_stage1_sum2;
    assign mult_stage2_and8 = mult_stage1_cout1 & mult_stage1_sum2;
    assign mult_stage2_or1 = mult_stage2_and6 | mult_stage2_and7;
    assign mult_stage2_cout1 = mult_stage2_or1 | mult_stage2_and8;
    assign mult_stage2_xor1 = mult_stage2_and5 ^ mult_stage1_sum2;
    assign mult_stage2_sum1 = mult_stage2_xor1 ^ mult_stage1_cout1;
    assign mult_stage2_and11 = a[2] & b[2];
    assign mult_stage2_and12 = a[3] & b[1];
    assign mult_stage2_and13 = mult_stage2_and11 & mult_stage1_cout2;
    assign mult_stage2_and14 = mult_stage2_and12 & mult_stage1_cout2;
    assign mult_stage2_and15 = mult_stage2_and11 & mult_stage2_and12;
    assign mult_stage2_or2 = mult_stage2_and13 | mult_stage2_and14;
    assign mult_stage2_cout2 = mult_stage2_or2 | mult_stage2_and15;
    assign mult_stage2_xor2 = mult_stage2_and11 ^ mult_stage2_and12;
    assign mult_stage2_sum2 = mult_stage2_xor2 ^ mult_stage1_cout2;
    assign mult_stage3_and1 = a[0] & b[3];
    assign mult_stage3_and2 = mult_stage3_and1 & mult_stage2_cout0;
    assign mult_stage3_and3 = mult_stage3_and1 & mult_stage2_sum1;
    assign mult_stage3_and4 = mult_stage2_cout0 & mult_stage2_sum1;
    assign mult_stage3_or0 = mult_stage3_and2 | mult_stage3_and3;
    assign mult_stage3_cout0 = mult_stage3_or0 | mult_stage3_and4;
    assign mult_stage3_xor0 = mult_stage3_and1 ^ mult_stage2_cout0;
    assign z[3] = mult_stage3_xor0 ^ mult_stage2_sum1;
    assign mult_stage3_and5 = a[1] & b[3];
    assign mult_stage3_and6 = mult_stage3_and5 & mult_stage2_cout1;
    assign mult_stage3_and7 = mult_stage3_and5 & mult_stage2_sum2;
    assign mult_stage3_and8 = mult_stage2_cout1 & mult_stage2_sum2;
    assign mult_stage3_or1 = mult_stage3_and6 | mult_stage3_and7;
    assign mult_stage3_cout1 = mult_stage3_or1 | mult_stage3_and8;
    assign mult_stage3_xor1 = mult_stage3_and5 ^ mult_stage2_sum2;
    assign mult_stage3_sum1 = mult_stage3_xor1 ^ mult_stage2_cout1;
    assign mult_stage3_and11 = a[2] & b[3];
    assign mult_stage3_and12 = a[3] & b[2];
    assign mult_stage3_and13 = mult_stage3_and11 & mult_stage2_cout2;
    assign mult_stage3_and14 = mult_stage3_and12 & mult_stage2_cout2;
    assign mult_stage3_and15 = mult_stage3_and11 & mult_stage3_and12;
    assign mult_stage3_or2 = mult_stage3_and13 | mult_stage3_and14;
    assign mult_stage3_cout2 = mult_stage3_or2 | mult_stage3_and15;
    assign mult_stage3_xor2 = mult_stage3_and11 ^ mult_stage3_and12;
    assign mult_stage3_sum2 = mult_stage3_xor2 ^ mult_stage2_cout2;
/*This is the LAST stage for CSA multiplier.*/
    assign mult_laststage_cout0 = mult_stage3_sum1 & mult_stage3_cout0;
    assign z[4] = mult_stage3_sum1 ^ mult_stage3_cout0;
    assign mult_laststage_and1 = mult_stage3_sum2 & mult_stage3_cout1;
    assign mult_laststage_and2 = mult_stage3_sum2 & mult_laststage_cout0;
    assign mult_laststage_and3 = mult_stage3_cout1 & mult_laststage_cout0;
    assign mult_laststage_or1 = mult_laststage_and1 | mult_laststage_and2;
    assign mult_laststage_cout1 = mult_laststage_or1 | mult_laststage_and3;
    assign mult_laststage_xor1 = mult_laststage_cout0 ^ mult_stage3_sum2;
    assign z[5] = mult_laststage_xor1 ^ mult_stage3_cout1;
    assign mult_laststage_and5 = a[3] & b[3];
    assign mult_laststage_and6 = mult_laststage_and5 & mult_stage3_cout2;
    assign mult_laststage_and7 = mult_laststage_and5 & mult_laststage_cout1;
    assign mult_laststage_and8 = mult_stage3_cout2 & mult_laststage_cout1;
    assign mult_laststage_or2 = mult_laststage_and6 | mult_laststage_and7;
    assign mult_laststage_cout2 = mult_laststage_or2 | mult_laststage_and8;
    assign mult_laststage_xor2 = mult_laststage_cout1 ^ mult_laststage_and5;
    assign z[6] = mult_laststage_xor2 ^ mult_stage3_cout2;
    assign z[7] = mult_laststage_cout2;
endmodule
/* This is verilog file of multiplier designed by BechGen software.*/
